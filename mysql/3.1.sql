#Set the share price of a stock (for simulating market fluctuations in a stock's share price)
DELIMITER //
CREATE PROCEDURE updateStockPrice(IN stockPrice INTEGER, stockSymbol CHAR(20))
	 BEGIN
		 UPDATE Stock
		 SET Stock.PricePerShare = stockPrice
		 WHERE Stock.StockSymbol = stockSymbol;
	 END//

#Add, Edit and Delete information for an employee
#ADD   # maybe more data to be added
DELIMITER //
CREATE PROCEDURE addEmployee(IN ID INTEGER, SSN INTEGER, StartDate DATE, HourlyRate INTEGER)
	BEGIN
		INSERT INTO Employee
		VALUES(ID, SSN, StartDate, HourlyRate);
	END//

#EDIT
DELIMITER //
CREATE PROCEDURE editEmployeeSSN(IN ID INTEGER, SSN INTEGER)
	 BEGIN
		 UPDATE Employee
		 SET Employee.SSN = SSN
		 WHERE Employee.ID = ID;
	 END//

DELIMITER //
CREATE PROCEDURE editEmployeeStartDate(IN ID INTEGER, StartDate DATE)
	 BEGIN
		 UPDATE Employee
		 SET Employee.StartDate = StartDate
		 WHERE Employee.ID = ID;
	 END//

DELIMITER //
CREATE PROCEDURE editEmployeeHourlyRate(IN ID INTEGER, HourlyRate INTEGER)
	 BEGIN
		 UPDATE Employee
		 SET HourlyRate = HourlyRate
		 WHERE Employee.ID = ID;
	 END//

#delete
DELIMITER //
CREATE PROCEDURE deleteEmployee(IN employeeID INTEGER)
	 BEGIN
		DELETE FROM employee
		Where ID = employeeID;
	 END//


#Obtain a sales report for a particular month
DELIMITER //
CREATE PROCEDURE monthlySalesReport(IN month INTEGER)
	 BEGIN
		 SELECT StockOrder.*
		 FROM StockOrder
		 WHERE Month(StockOrder.DateTime) = month;
	 END//

#Produce a comprehensive listing of all stocks
DELIMITER //
CREATE PROCEDURE stockListing()
 BEGIN
	 SELECT* FROM Stock;
 END//

#Produce a list of orders by stock symbol
DELIMITER //
CREATE PROCEDURE stockListingBySymbol()
 BEGIN
	SELECT S.StockSymbol, O.NumShares, S.PricePerShare, O.PriceType, O.OrderType, P.LastName, P.FirstName
    FROM StockOrder O, Stock S, trade T, Account A, client C, person P
    WHERE T.StockId = S.StockSymbol AND T.OrderId = O.Id And T.AccountId = A.Id AND A.ClientID=C.ID And C.ID = P.SSN
    ORDER BY S.StockSymbol;
 END //
 

#Produce a list of orders by customer name
DELIMITER //
CREATE PROCEDURE stockListingByName()
 BEGIN
	SELECT P.LastName, P.FirstName, S.StockSymbol, O.NumShares, S.PricePerShare, O.PriceType, O.OrderType
    FROM StockOrder O, Stock S, trade T, Account A, client C, person P
    WHERE T.StockId = S.StockSymbol AND T.OrderId = O.Id And T.AccountId = A.Id AND A.ClientID=C.ID And C.ID = P.SSN
    ORDER BY P.LastName;
 END //

#Produce a summary listing of revenue generated by a particular stock 
DELIMITER //
CREATE PROCEDURE revenueByStock(IN StockSymbol CHAR(20))
 BEGIN
	 SELECT hasStock.NumShares * Stock.PricePerShare
	 FROM Stock, hasStock
	 WHERE Stock.StockSymbol = StockSymbol;
 END //

#Produce a summary listing of revenue generated by a particular stock type
DELIMITER //
CREATE PROCEDURE revenueByStockType(IN Type CHAR(20))
 BEGIN
	 SELECT hasStock.NumShares * Stock.PricePerShare
	 FROM Stock, hasStock
	 WHERE Stock.Type = Type;
 END //

#Produce a summary listing of revenue generated by a particular customer
DELIMITER //
CREATE PROCEDURE revenueByCustomerID(IN ID INTEGER)
 BEGIN
	 SELECT hasStock.NumShares * Stock.PricePerShare
	 FROM Client, Stock, hasStock
	 WHERE Client.ID = ID AND Stock.StockSymbol = hasStock.StockSymbol;
 END //

Determine which customer representative generated most total revenue
DELIMITER //
CREATE PROCEDURE mostRevenue_CustomerRepresentative()
 BEGIN
	 SELECT Employee.*
	 FROM Employee E
	 INNER JOIN
	    (SELECT E.ID, MAX(Stock.PricePerShare * hasStock.NumShares) AS MaxRevenue
	    FROM E, Stock, hasStock
	    GROUP BY E.ID) groupedE
	 ON E.home = groupedE.ID
	 AND E.datetime = groupedE.MaxRevenue;
 END //
DELIMITER;

Determine which customer generated most total revenue
DELIMITER //
CREATE PROCEDURE customer_mostRevenue()
 BEGIN
	SELECT C.*
	FROM Client C
	INNER JOIN
	    (SELECT C.ID, MAX(Stock.PricePerShare * hasStock.NumShares) AS MaxRevenue
	    FROM C, S, H 
        GROUP BY C.ID) groupedC
	ON C.ID = groupedC.ID 
	AND C.datetime = groupedC.MaxRevenue;
 END //
DELIMITER;

#Produce a list of most actively traded stocks
DELIMITER //
CREATE PROCEDURE activeStocks()
 BEGIN
    SELECT Trade.StockId
	FROM Trade
	GROUP BY Trade.StockId
	ORDER BY COUNT(Trade.StockId) DESC;
 END //
