#Set the share price of a stock (for simulating market fluctuations in a stock's share price)
DELIMITER //
CREATE PROCEDURE updateStockPrice(IN stockPrice INTEGER, stockSymbol CHAR(20))
 IF (stockPrice < 0 AND stockSymbol IS NULL)
	 BEGIN
		 PRINT 'invalid input'
	 END
 ELSE
	 BEGIN
		 UPDATE Stock
		 SET PricePerShare = stockPrice
		 WHERE StockSymbol = stockSymbol;
	 END //
DELIMITER;

#Add, Edit and Delete information for an employee
#ADD
DELIMITER //
CREATE PROCEDURE addEmployee(IN ID INTEGER, SSN INTEGER, StartDate DATE, HourlyRate INTEGER)
 IF (ID < 0 AND ID > 1000000000)
	 BEGIN
		 PRINT 'invalid input'
	 END
 ELSE
	 BEGIN
		INSERT INTO Employee
		VALUES(ID, SSN, StartDate, HourlyRate)
	 END //
DELIMITER;

#EDIT
DELIMITER //
CREATE PROCEDURE editEmployeeSSN(IN ID INTEGER, SSN INTEGER)
  IF (ID < 0 AND ID > 1000000000)
	 BEGIN
		 PRINT 'invalid input'
	 END
 ELSE
	 BEGIN
		 UPDATE Stock
		 SET Stock.SSN = SSN
		 WHERE Stock.ID = ID;
	 END //
DELIMITER;

DELIMITER //
CREATE PROCEDURE deleteEmployeeSSN(IN ID INTEGER, StartDate DATE)
  IF (ID < 0 AND ID > 1000000000)
	 BEGIN
		 PRINT 'invalid input'
	 END
 ELSE
	 BEGIN
		 UPDATE Stock
		 SET Stock.StartDate = StartDate
		 WHERE Stock.ID = ID;
	 END //
DELIMITER;

DELIMITER //
CREATE PROCEDURE deleteEmployeeStartDate(IN ID INTEGER, HourlyRate INTEGER)
  IF (ID < 0 AND ID > 1000000000)
	 BEGIN
		 PRINT 'invalid input'
	 END
 ELSE
	 BEGIN
		 UPDATE Stock
		 SET HourlyRate = HourlyRate
		 WHERE Stock.ID = ID;
	 END //
DELIMITER;


#delete
DELIMITER //
CREATE PROCEDURE deleteEmployeeSSN(IN ID INTEGER)
  IF (ID < 0 AND ID > 1000000000)
	 BEGIN
		 PRINT 'invalid input'
	 END
 ELSE
	 BEGIN
		 UPDATE Stock
		 SET Stock.SSN = NULL
		 WHERE Stock.ID = ID;
	 END //
DELIMITER;

DELIMITER //
CREATE PROCEDURE deleteEmployeeSSN(IN ID INTEGER)
  IF (ID < 0 AND ID > 1000000000)
	 BEGIN
		 PRINT 'invalid input'
	 END
 ELSE
	 BEGIN
		 UPDATE Stock
		 SET Stock.StartDate = NULL
		 WHERE Stock.ID = ID;
	 END //
DELIMITER;

DELIMITER //
CREATE PROCEDURE deleteEmployeeStartDate(IN ID INTEGER)
 BEGIN
	 UPDATE Stock
	 SET HourlyRate = NULL
	 WHERE Stock.ID = ID;
 END //
DELIMITER;

#Obtain a sales report for a particular month  @todo
DELIMITER //
CREATE PROCEDURE monthlySalesReport(IN DateTime DATETIME)
  IF (ID < 0 AND ID > 1000000000)
	 BEGIN
		 PRINT 'invalid input'
	 END
 ELSE
	 BEGIN
		 SELECT Month(DateTime)
		 FROM 
		 WHERE Id = Id
	 END //
DELIMITER;

#Produce a comprehensive listing of all stocks
DELIMITER //
CREATE PROCEDURE stockListing()
 BEGIN
	 SELECT* FROM Stock
 END //
DELIMITER;

#Produce a list of orders by stock symbol
DELIMITER //
CREATE PROCEDURE stockListingBySymbol()
 BEGIN
	 SELECT* FROM Stock
	 ORDER BY Stock.StockSymbol
 END //
DELIMITER;

#Produce a list of orders by customer name
DELIMITER //
CREATE PROCEDURE stockListingByName()
 BEGIN
	 SELECT* FROM Stock
	 ORDER BY Stock.CompanyName
 END //
DELIMITER;

#Produce a summary listing of revenue generated by a particular stock @todo
DELIMITER //
CREATE PROCEDURE revenueByStock(IN StockSymbol CHAR(20))
 BEGIN
	 SELECT* 
	 FROM Trade
	 WHERE Trade.StockId = StockSymbol
 END //
DELIMITER;

#Produce a summary listing of revenue generated by a particular stock type @todo
DELIMITER //
CREATE PROCEDURE revenueByStockType(IN Type CHAR(20))
 BEGIN
	 SELECT* 
	 FROM Trade, Stock
	 WHERE Stock.Type = Type
 END //
DELIMITER;

#Produce a summary listing of revenue generated by a particular customer @todo
DELIMITER //
CREATE PROCEDURE revenueByCustomer(IN Type CHAR(20))
 BEGIN
	 SELECT* 
	 FROM Trade, Stock
	 WHERE Stock.Type = Type
 END //
DELIMITER;

#Determine which customer representative generated most total revenue @todo
DELIMITER //
CREATE PROCEDURE revenueByCustomer(IN Type CHAR(20))
 BEGIN
	 SELECT* 
	 FROM Trade, Stock
	 WHERE Stock.Type = Type
 END //
DELIMITER;










